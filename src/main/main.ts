import { app, BrowserWindow, ipcMain, nativeImage, shell } from "electron";
import axios, { AxiosRequestConfig, CancelTokenSource } from "axios";

// Constants
import { isDev, API_URL } from "@Config/constants";
const iconPath =
  process.platform !== "darwin" ? "assets/favicon.ico" : "assets/favicon.icns";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const requestCancelTokens: Map<string, CancelTokenSource> = new Map();

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

ipcMain.on("ipc-bridge", async (event, arg) => {
  const msgTemplate = (pingPong: string) => `IPC test: ${pingPong}`;
  console.log(msgTemplate(arg));
  event.reply("ipc-bridge", msgTemplate("pong"));
});

// Fetch data from any URL and send it to the renderer process
ipcMain.handle("get-data", async (event, { url, requestId }) => {
  try {
    // Cancel any existing request with the same ID before making a new one
    const existingCancelToken = requestCancelTokens.get(requestId);
    if (existingCancelToken) {
      existingCancelToken.cancel("Request canceled due to new request");
    }

    // Create a new cancellation token source
    const cancelTokenSource = axios.CancelToken.source();
    requestCancelTokens.set(requestId, cancelTokenSource);

    const config: AxiosRequestConfig = {
      cancelToken: cancelTokenSource.token,
      adapter: "http",
    };

    const response = await axios.get(`${API_URL}${url}`, config);
    return { requestId, data: response.data };
  } catch (error) {
    console.error(error.message);
    return { requestId, error: error.message };
  } finally {
    // Remove the cancel token source after the request is completed
    requestCancelTokens.delete(requestId);
  }
});

ipcMain.on("abort-request", (event, requestId) => {
  // Cancel the specific request with the provided ID
  const cancelTokenSource = requestCancelTokens.get(requestId);
  if (cancelTokenSource) {
    cancelTokenSource.cancel("Request canceled by user");
    requestCancelTokens.delete(requestId);
  }
});

ipcMain.on("open-window", async (event, { url, minimize }) => {
  launchWindow(url, minimize);
});

ipcMain.on("close-window", async (event) => {
  closeWindow();
});

// Windows
let mainWindow: BrowserWindow;
let overlayWindow: BrowserWindow;

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    minHeight: 733,
    minWidth: 1016,
    height: 733,
    width: 1216,
    icon: nativeImage.createFromPath(iconPath),
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    title: "Qiqi's Notebook",
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Other window setup
  mainWindow.removeMenu();

  // Open the DevTools.
  if (isDev) {
    mainWindow.webContents.openDevTools({ mode: "detach" });
  }

  // Open urls in the user's browser
  mainWindow.webContents.setWindowOpenHandler((edata) => {
    shell.openExternal(edata.url);
    return { action: "deny" };
  });
};

function createOverlayWindow(url: string) {
  if (overlayWindow) {
    overlayWindow.close();
  }
  overlayWindow = new BrowserWindow({
    width: 400,
    height: 375,
    minWidth: 400,
    minHeight: 375,
    backgroundColor: "#000",
    alwaysOnTop: true,
    icon: nativeImage.createFromPath(iconPath),
    title: "Qiqi's Notebook",
  });
  overlayWindow.loadURL(url);

  // Other window setup
  overlayWindow.removeMenu();
  overlayWindow.setVisibleOnAllWorkspaces(true, { visibleOnFullScreen: true }); // Mac
  // TODO: Save resize and position

  // On close
  overlayWindow.addListener("close", () => {
    overlayWindow = null;
    if (mainWindow) {
      mainWindow.webContents.send("window-event", 0);
    }
  });
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

function launchWindow(url: any, minimize: boolean) {
  if (overlayWindow) {
    overlayWindow.loadURL(url);
  } else {
    createOverlayWindow(url);
  }
  if (mainWindow && minimize) {
    mainWindow.minimize();
  }
}

function closeWindow() {
  if (overlayWindow) {
    overlayWindow.close();
    overlayWindow = null;
  }
}
