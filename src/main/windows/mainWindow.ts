import { BrowserWindow, nativeImage, shell } from "electron";
import {
  MAIN_HEIGHT,
  MAIN_MIN_HEIGHT,
  MAIN_MIN_WIDTH,
  MAIN_WIDTH,
  isDev,
} from "@Config/constants";

// Types
interface MainWindowParams {
  deepLink?: string;
}

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handler
import handleDeepLinks from "../events/deepLink";

// Windows
import { overlayWindow } from "./overlayWindow";
export let mainWindow: BrowserWindow | null = null;

export function createMainWindow(params?: MainWindowParams) {
  const iconPath =
    process.platform !== "darwin"
      ? "assets/icons/icon.ico"
      : "assets/icons/icon.icns";

  // Create the browser window.
  mainWindow = new BrowserWindow({
    minHeight: MAIN_MIN_HEIGHT,
    minWidth: MAIN_MIN_WIDTH,
    height: MAIN_HEIGHT,
    width: MAIN_WIDTH,
    icon: nativeImage.createFromPath(iconPath),
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      backgroundThrottling: false, // Prevent timer suspension
    },
    title: "Qiqi's Notebook",
    backgroundColor: "#191919",
    show: false,
  });

  // Load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Other window setup
  mainWindow.removeMenu();

  // Open the DevTools.
  if (isDev) {
    mainWindow.webContents.openDevTools({ mode: "detach" });
  }

  // Open URLs in the user's browser
  mainWindow.webContents.setWindowOpenHandler((edata) => {
    shell.openExternal(edata.url);
    return { action: "deny" };
  });

  // Show once ready
  mainWindow.once("ready-to-show", () => {
    mainWindow.show();

    // Handle cold-start deep link
    if (params.deepLink) {
      handleDeepLinks(params.deepLink);
    }
  });

  // Close overlay window on close
  mainWindow.on("close", () => {
    if (overlayWindow) {
      overlayWindow.close();
    }
  });
}
